import { Sprint, SprintId, Commit, EntityGroups, User } from './types';
import { LeadersData } from './stories';
import { groupCommitsByUsers } from './util';

export default function getLeadersData({
  entities,
  groupedCommits,
  selectedSprintId,
}: {
  entities: EntityGroups;
  groupedCommits: Map<SprintId, Commit[]>;
  selectedSprintId: number;
}): LeadersData {
  const currentSprint = entities.sprints.get(selectedSprintId) as Sprint;
  // ids –∫–æ–º–º–∏—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞
  const currentCommits = groupedCommits.get(selectedSprintId) as Commit[];
  const commitsGroupedByUsers = groupCommitsByUsers(currentCommits);

  const outputUsers = Array.from(commitsGroupedByUsers, ([userId, commits]) => {
    const userEntity = entities.users.get(userId) as User;
    return {
      id: userId,
      name: userEntity.name,
      avatar: userEntity.avatar,
      valueText: String(commits.length),
    };
  });

  // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤
  // –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤, —Ç–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ö id
  outputUsers.sort((user1, user2) => {
    let val1 = Number(user1.valueText);
    let val2 = Number(user2.valueText);

    if (val1 === val2) {
      val1 = user2.id;
      val2 = user1.id;
    }

    return val2 - val1;
  });

  return {
    title: '–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤',
    subtitle: currentSprint.name,
    emoji: 'üëë',
    users: outputUsers,
  };
}
